{"version":3,"sources":["components/Block.js","components/Hour1stPlace.js","components/Hour10thPlace.js","components/Minute1stPlace.js","components/Minute10thPlace.js","components/Clock.js","App.js","serviceWorker.js","index.js"],"names":["Block","props","blockColor","value","className","Hour1stPlace","number","parseInt","Hour10thPlace","Minute1stPlace","Minute10thPlace","Padding","times","toString","padStart","toBinaryString","string","Clock","useState","Date","dateTime","setDateime","useEffect","id","setInterval","clearInterval","current_hours","getHours","hours_string","current_minutes","getMinutes","minutes_string","binary_hours_10","binary_hours_1","binary_minutes_10","binary_minutes_1","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAEaA,EAAQ,SAACC,GACpB,IAAMC,EAA6B,MAAhBD,EAAME,MAAgB,aAAe,aACxD,OAAO,yBAAKC,UAAWF,KCAZG,EAAe,SAACJ,GAAW,IAC9BE,EAAUF,EAAVE,MACFG,EAASC,SAASJ,EAAO,GAC/B,OACE,yBAAKC,UAAU,UACb,kBAAC,EAAD,CAAOD,MAAOA,EAAM,KACpB,kBAAC,EAAD,CAAOA,MAAOA,EAAM,KACpB,kBAAC,EAAD,CAAOA,MAAOA,EAAM,KACpB,kBAAC,EAAD,CAAOA,MAAOA,EAAM,KACpB,4BAAKG,KCTEE,EAAgB,SAACP,GAAW,IAC/BE,EAAUF,EAAVE,MACFG,EAASC,SAASJ,EAAO,GAC/B,OACE,yBAAKC,UAAU,UACb,kBAAC,EAAD,CAAOD,MAAOA,EAAM,KACpB,kBAAC,EAAD,CAAOA,MAAOA,EAAM,KACpB,4BAAKG,KCPEG,EAAiB,SAACR,GAAW,IAChCE,EAAUF,EAAVE,MACFG,EAASC,SAASJ,EAAO,GAC/B,OACE,yBAAKC,UAAU,UACb,kBAAC,EAAD,CAAOD,MAAOA,EAAM,KACpB,kBAAC,EAAD,CAAOA,MAAOA,EAAM,KACpB,kBAAC,EAAD,CAAOA,MAAOA,EAAM,KACpB,kBAAC,EAAD,CAAOA,MAAOA,EAAM,KACpB,4BAAKG,KCTEI,EAAkB,SAACT,GAAW,IACjCE,EAAUF,EAAVE,MACFG,EAASC,SAASJ,EAAO,GAC/B,OACE,yBAAKC,UAAU,UACb,kBAAC,EAAD,CAAOD,MAAOA,EAAM,KACpB,kBAAC,EAAD,CAAOA,MAAOA,EAAM,KACpB,kBAAC,EAAD,CAAOA,MAAOA,EAAM,KACpB,4BAAKG,KC6BLK,EAAU,SAACC,GACf,OAAOA,EAAMC,SAAS,IAAIC,SAAS,EAAG,MAGlCC,EAAiB,SAACC,GACtB,OAAOT,SAASS,GAAQH,SAAS,IAGpBI,EA1CD,WAAO,IAAD,EACaC,mBAAS,IAAIC,MAD1B,mBACXC,EADW,KACDC,EADC,KAGlBC,qBAAU,WACR,IAAMC,EAAKC,aAAY,kBAAMH,EAAW,IAAIF,QAAS,KACrD,OAAO,WACLM,cAAcF,MAEf,IAEH,IAAMG,EAAgBN,EAASO,WACzBC,EAAejB,EAAQe,GAEvBG,EAAkBT,EAASU,aAC3BC,EAAiBpB,EAAQkB,GAEzBG,EAAkBjB,EAAea,EAAa,IAAId,SAAS,EAAG,KAC9DmB,EAAiBlB,EAAea,EAAa,IAAId,SAAS,EAAG,KAE7DoB,EAAoBnB,EAAegB,EAAe,IAAIjB,SAAS,EAAG,KAClEqB,EAAmBpB,EAAegB,EAAe,IAAIjB,SAAS,EAAG,KAEvE,OACE,6BACE,yBAAKV,UAAU,aACb,kBAAC,EAAD,CAAeD,MAAO6B,IACtB,kBAAC,EAAD,CAAc7B,MAAO8B,IACrB,kBAAC,EAAD,CAAiB9B,MAAO+B,IACxB,kBAAC,EAAD,CAAgB/B,MAAOgC,O,MCrBhBC,MARf,WACE,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,QCGciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6bc68b5d.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Block = (props) => {\n  const blockColor = props.value === '1' ? 'BlackBlock' : 'WhiteBlock'\n  return <div className={blockColor}></div>\n}\n","import React from 'react'\n\nimport { Block } from './Block'\n\nexport const Hour1stPlace = (props) => {\n  const { value } = props\n  const number = parseInt(value, 2)\n  return (\n    <div className=\"Blocks\">\n      <Block value={value[0]} />\n      <Block value={value[1]} />\n      <Block value={value[2]} />\n      <Block value={value[3]} />\n      <h1>{number}</h1>\n    </div>\n  )\n}\n","import React from 'react'\n\nimport { Block } from './Block'\n\nexport const Hour10thPlace = (props) => {\n  const { value } = props\n  const number = parseInt(value, 2)\n  return (\n    <div className=\"Blocks\">\n      <Block value={value[0]} />\n      <Block value={value[1]} />\n      <h1>{number}</h1>\n    </div>\n  )\n}\n","import React from 'react'\n\nimport { Block } from './Block'\n\nexport const Minute1stPlace = (props) => {\n  const { value } = props\n  const number = parseInt(value, 2)\n  return (\n    <div className=\"Blocks\">\n      <Block value={value[0]} />\n      <Block value={value[1]} />\n      <Block value={value[2]} />\n      <Block value={value[3]} />\n      <h1>{number}</h1>\n    </div>\n  )\n}\n","import React from 'react'\n\nimport { Block } from './Block'\n\nexport const Minute10thPlace = (props) => {\n  const { value } = props\n  const number = parseInt(value, 2)\n  return (\n    <div className=\"Blocks\">\n      <Block value={value[0]} />\n      <Block value={value[1]} />\n      <Block value={value[2]} />\n      <h1>{number}</h1>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react'\n\nimport { Hour1stPlace } from './Hour1stPlace'\nimport { Hour10thPlace } from './Hour10thPlace'\nimport { Minute1stPlace } from './Minute1stPlace'\nimport { Minute10thPlace } from './Minute10thPlace'\n\nconst Clock = () => {\n  const [dateTime, setDateime] = useState(new Date())\n\n  useEffect(() => {\n    const id = setInterval(() => setDateime(new Date()), 1000)\n    return () => {\n      clearInterval(id)\n    }\n  }, [])\n\n  const current_hours = dateTime.getHours()\n  const hours_string = Padding(current_hours)\n\n  const current_minutes = dateTime.getMinutes()\n  const minutes_string = Padding(current_minutes)\n\n  const binary_hours_10 = toBinaryString(hours_string[0]).padStart(2, '0')\n  const binary_hours_1 = toBinaryString(hours_string[1]).padStart(4, '0')\n\n  const binary_minutes_10 = toBinaryString(minutes_string[0]).padStart(3, '0')\n  const binary_minutes_1 = toBinaryString(minutes_string[1]).padStart(4, '0')\n\n  return (\n    <div>\n      <div className=\"BlockArea\">\n        <Hour10thPlace value={binary_hours_10} />\n        <Hour1stPlace value={binary_hours_1} />\n        <Minute10thPlace value={binary_minutes_10} />\n        <Minute1stPlace value={binary_minutes_1} />\n      </div>\n    </div>\n  )\n}\n\nconst Padding = (times) => {\n  return times.toString(10).padStart(2, '0')\n}\n\nconst toBinaryString = (string) => {\n  return parseInt(string).toString(2)\n}\n\nexport default Clock\n","import React from \"react\";\n\nimport Clock from \"./components/Clock\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Clock />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}