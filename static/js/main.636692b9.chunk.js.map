{"version":3,"sources":["components/Block.tsx","components/Blocks.tsx","components/Clock.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Block","React","memo","blockColor","value","className","displayName","Blocks","value_arr","split","number","parseInt","blockList","map","Clock","useState","Date","dateTime","setDateime","useEffect","id","setInterval","clearInterval","hoursString","Padding","getHours","toString","minutesString","getMinutes","secondString","getSeconds","binaryHours10","toBinaryString","binaryHours1","binaryMinutes10","binaryMinutes1","binarySeconds10","binarySeconds1","string","start_num","padStart","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kMAMaA,EAAyBC,IAAMC,MAAK,YAAiB,IAC1DC,EAAuB,MADkC,EAAbC,MACf,aAAe,aAClD,OAAO,qBAAKC,UAAWF,OAGzBH,EAAMM,YAAc,QCHb,IAAMC,EAA0BN,IAAMC,MAAK,YAAgB,IAAbE,EAAY,EAAZA,MAC7CI,EAAYJ,EAAMK,MAAM,IAExBC,EAASC,SAASP,EAAO,GAEzBQ,EAAYJ,EAAUK,KAAI,SAACT,GAC/B,OAAO,cAACJ,EAAD,CAAOI,MAAOA,OAGvB,OACE,sBAAKC,UAAU,SAAf,UACGO,EACD,6BAAKF,UAKXH,EAAOD,YAAc,SCrBrB,IAAMQ,EAAQb,IAAMC,MAAK,WACvB,MAA+Ba,mBAAS,IAAIC,MAA5C,mBAAOC,EAAP,KAAiBC,EAAjB,KAEAC,qBAAU,WACR,IAAMC,EAAKC,aAAY,kBAAMH,EAAW,IAAIF,QAAS,KACrD,OAAO,WACLM,cAAcF,MAEf,IAEH,IAAMG,EAAcC,EAAQP,EAASQ,WAAWC,WAAY,GAEtDC,EAAgBH,EAAQP,EAASW,aAAaF,WAAY,GAE1DG,EAAeL,EAAQP,EAASa,aAAaJ,WAAY,GAEzDK,EAAgBP,EAAQQ,EAAeT,EAAY,IAAK,GACxDU,EAAeT,EAAQQ,EAAeT,EAAY,IAAK,GAEvDW,EAAkBV,EAAQQ,EAAeL,EAAc,IAAK,GAC5DQ,EAAiBX,EAAQQ,EAAeL,EAAc,IAAK,GAE3DS,EAAkBZ,EAAQQ,EAAeH,EAAa,IAAK,GAC3DQ,EAAiBb,EAAQQ,EAAeH,EAAa,IAAK,GAEhE,OACE,8BACE,sBAAKxB,UAAU,YAAf,UACE,cAACE,EAAD,CAAQH,MAAO2B,IACf,cAACxB,EAAD,CAAQH,MAAO6B,IACf,cAAC1B,EAAD,CAAQH,MAAO8B,IACf,cAAC3B,EAAD,CAAQH,MAAO+B,IACf,cAAC5B,EAAD,CAAQH,MAAOgC,IACf,cAAC7B,EAAD,CAAQH,MAAOiC,YAMvBvB,EAAMR,YAAc,QAEpB,IAAMkB,EAAU,SAACc,EAAgBC,GAC/B,OAAOD,EAAOZ,WAAWc,SAASD,EAAW,MAGzCP,EAAiB,SAACM,GACtB,OAAO3B,SAAS2B,GAAQZ,SAAS,IAGpBZ,I,MCvCA2B,MARf,WACE,OACE,qBAAKpC,UAAU,MAAf,SACE,cAAC,EAAD,OCGcqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.636692b9.chunk.js","sourcesContent":["import React from 'react'\n\ntype Props = {\n  value: string\n}\n\nexport const Block: React.FC<Props> = React.memo(({ value } ) => {\n  const blockColor = value === '1' ? 'BlackBlock' : 'WhiteBlock'\n  return <div className={blockColor}></div>\n})\n\nBlock.displayName = \"Block\"\n","import React from 'react'\n\nimport { Block } from './Block'\n\ntype Props = {\n  value: string\n}\n\nexport const Blocks: React.FC<Props> = React.memo(({ value }) => {\n  const value_arr = value.split('')\n\n  const number = parseInt(value, 2)\n\n  const blockList = value_arr.map((value: string) => {\n    return <Block value={value} />\n  })\n\n  return (\n    <div className=\"Blocks\">\n      {blockList}\n      <h1>{number}</h1>\n    </div>\n  )\n})\n\nBlocks.displayName = \"BLocks\"\n","import React, { useState, useEffect } from 'react'\n\nimport { Blocks } from './Blocks'\n\nconst Clock = React.memo(() => {\n  const [dateTime, setDateime] = useState(new Date())\n\n  useEffect(() => {\n    const id = setInterval(() => setDateime(new Date()), 1000)\n    return () => {\n      clearInterval(id)\n    }\n  }, [])\n\n  const hoursString = Padding(dateTime.getHours().toString(), 2)\n\n  const minutesString = Padding(dateTime.getMinutes().toString(), 2)\n\n  const secondString = Padding(dateTime.getSeconds().toString(), 2)\n\n  const binaryHours10 = Padding(toBinaryString(hoursString[0]), 2)\n  const binaryHours1 = Padding(toBinaryString(hoursString[1]), 4)\n\n  const binaryMinutes10 = Padding(toBinaryString(minutesString[0]), 3)\n  const binaryMinutes1 = Padding(toBinaryString(minutesString[1]), 4)\n\n  const binarySeconds10 = Padding(toBinaryString(secondString[0]), 3)\n  const binarySeconds1 = Padding(toBinaryString(secondString[1]), 4)\n\n  return (\n    <div>\n      <div className=\"BlockArea\">\n        <Blocks value={binaryHours10} />\n        <Blocks value={binaryHours1} />\n        <Blocks value={binaryMinutes10} />\n        <Blocks value={binaryMinutes1} />\n        <Blocks value={binarySeconds10} />\n        <Blocks value={binarySeconds1} />\n      </div>\n    </div>\n  )\n})\n\nClock.displayName = \"Clock\"\n\nconst Padding = (string: string, start_num: number): string => {\n  return string.toString().padStart(start_num, '0')\n}\n\nconst toBinaryString = (string: string): string => {\n  return parseInt(string).toString(2)\n}\n\nexport default Clock\n","import React from 'react'\n\nimport Clock from './components/Clock'\n\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Clock />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}